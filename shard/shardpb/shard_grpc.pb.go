// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shardpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplicaClient is the client API for Replica service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicaClient interface {
	Append(ctx context.Context, opts ...grpc.CallOption) (Replica_AppendClient, error)
	Read(ctx context.Context, opts ...grpc.CallOption) (Replica_ReadClient, error)
	Trim(ctx context.Context, in *TrimRequest, opts ...grpc.CallOption) (*Ok, error)
}

type replicaClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicaClient(cc grpc.ClientConnInterface) ReplicaClient {
	return &replicaClient{cc}
}

func (c *replicaClient) Append(ctx context.Context, opts ...grpc.CallOption) (Replica_AppendClient, error) {
	stream, err := c.cc.NewStream(ctx, &Replica_ServiceDesc.Streams[0], "/shard.Replica/Append", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicaAppendClient{stream}
	return x, nil
}

type Replica_AppendClient interface {
	Send(*AppendRequest) error
	Recv() (*AppendResponse, error)
	grpc.ClientStream
}

type replicaAppendClient struct {
	grpc.ClientStream
}

func (x *replicaAppendClient) Send(m *AppendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicaAppendClient) Recv() (*AppendResponse, error) {
	m := new(AppendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicaClient) Read(ctx context.Context, opts ...grpc.CallOption) (Replica_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Replica_ServiceDesc.Streams[1], "/shard.Replica/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicaReadClient{stream}
	return x, nil
}

type Replica_ReadClient interface {
	Send(*ReadRequest) error
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type replicaReadClient struct {
	grpc.ClientStream
}

func (x *replicaReadClient) Send(m *ReadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicaReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicaClient) Trim(ctx context.Context, in *TrimRequest, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/shard.Replica/Trim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicaServer is the server API for Replica service.
// All implementations must embed UnimplementedReplicaServer
// for forward compatibility
type ReplicaServer interface {
	Append(Replica_AppendServer) error
	Read(Replica_ReadServer) error
	Trim(context.Context, *TrimRequest) (*Ok, error)
	mustEmbedUnimplementedReplicaServer()
}

// UnimplementedReplicaServer must be embedded to have forward compatible implementations.
type UnimplementedReplicaServer struct {
}

func (UnimplementedReplicaServer) Append(Replica_AppendServer) error {
	return status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedReplicaServer) Read(Replica_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedReplicaServer) Trim(context.Context, *TrimRequest) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trim not implemented")
}
func (UnimplementedReplicaServer) mustEmbedUnimplementedReplicaServer() {}

// UnsafeReplicaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicaServer will
// result in compilation errors.
type UnsafeReplicaServer interface {
	mustEmbedUnimplementedReplicaServer()
}

func RegisterReplicaServer(s grpc.ServiceRegistrar, srv ReplicaServer) {
	s.RegisterService(&Replica_ServiceDesc, srv)
}

func _Replica_Append_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicaServer).Append(&replicaAppendServer{stream})
}

type Replica_AppendServer interface {
	Send(*AppendResponse) error
	Recv() (*AppendRequest, error)
	grpc.ServerStream
}

type replicaAppendServer struct {
	grpc.ServerStream
}

func (x *replicaAppendServer) Send(m *AppendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicaAppendServer) Recv() (*AppendRequest, error) {
	m := new(AppendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Replica_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicaServer).Read(&replicaReadServer{stream})
}

type Replica_ReadServer interface {
	Send(*ReadResponse) error
	Recv() (*ReadRequest, error)
	grpc.ServerStream
}

type replicaReadServer struct {
	grpc.ServerStream
}

func (x *replicaReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicaReadServer) Recv() (*ReadRequest, error) {
	m := new(ReadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Replica_Trim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServer).Trim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shard.Replica/Trim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServer).Trim(ctx, req.(*TrimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Replica_ServiceDesc is the grpc.ServiceDesc for Replica service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Replica_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shard.Replica",
	HandlerType: (*ReplicaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trim",
			Handler:    _Replica_Trim_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Append",
			Handler:       _Replica_Append_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _Replica_Read_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "shardpb/shard.proto",
}
